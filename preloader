#!/usr/bin/env bash

# MIT License
#
# Copyright (c) 2022 Davidson Francis <davidsondfgl@gmail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

LIBNAME="libpreloader.so"
SCRIPT_NAME="$0"

export PRELOADER_PORT=3636

# Paths
CURDIR="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
TMPDIR=${TMPDIR:="/tmp"}
PRELOADER="$CURDIR/$LIBNAME"

start() {
	# lib should exist
	if [ ! -f "$PRELOADER" ]; then
		# Build if we're inside the source tree
		if [ -f "$CURDIR/preloader.c" ]; then
			make -C "$CURDIR/"
		# Otherwise, we need to launch the installed version,
		# if any.
		else
			if [ ! -f "$CURDIR/../lib/$LIBNAME" ]; then
				echo "Unable to execute preloader, please check if the" >&2
				echo "library is properly built and/or installed and" >&2
				echo "try again!" >&2
				exit 1
			else
				PRELOADER="$(readlink -f "$CURDIR"/../lib/$LIBNAME)"
			fi
		fi
	fi

	pid_file="$TMPDIR/preloader_$PRELOADER_PORT.pid"

	# If there is a pid file
	if [ -r "$pid_file" ]; then

		# and the process still running
		pid="$(cat "$pid_file")"
		if kill -s 0 "$pid" &> /dev/null; then
			echo "Error: There is a daemon running with pid $pid"   >&2
			echo "please kill it first or run in another port (-p)" >&2
			exit 1
		fi

	fi

	#
	# Obs: The argument list is fixed and defined here. The reason
	# for this is simplicity. It is much simpler to define a large
	# enough list of arguments and change it later than to allocate
	# a new list later.
	#
	# Allocating a new list also entails allocating envp and auxv,
	# which makes things unnecessarily more complicated. I prefer
	# to set a maximum argument size and edit the argument list
	# later.
	#
	# If for some reason the preloader_cli uses more than 200
	# arguments, an error will be thrown in stderr indicating the
	# exceeded amount of arguments and the daemon will stop.
	#
	LD_PRELOAD="$PRELOADER" "$1" {1..200}
}

stop() {

	pid_file="$TMPDIR/preloader_$PRELOADER_PORT.pid"

	if [ ! -r "$pid_file" ]; then
		echo "PID file not found for port $PRELOADER_PORT, please check" >&2
		echo "the parameters again. You can check which instances are"   >&2
		echo "running by running:"    >&2
		echo "  $ sudo netstat -ntlp" >&2
		echo "and them you can kill the daemon accordingly." >&2
		exit 1
	fi

	pid="$(cat "$pid_file")"

	kill "$pid" &> /dev/null

	if [ "$?" -eq 1 ]; then
		echo "Unable to kill daemon with PID $pid, maybe the daemon is" >&2
		echo "already dead?" >&2
		exit 1
	fi

	rm "$pid_file"
	exit 0
}

check_for_null() {
	if [ -z "$1" ]; then
		echo "Parameter ($1) should not be empty!"
		usage
	fi
}

check_for_integer() {
	case $1 in
		''|*[!0-9]*)
			echo "Parameter ($1) is not a number!"
			usage
			;;
	esac
}

usage() {
cat <<EOF >&2
Usage: $SCRIPT_NAME [options] <program-name-or-path>

Examples:
  $SCRIPT_NAME clang
  $SCRIPT_NAME -p 5050 --bind clang
  etc

Options:
  -p,--port <port>
        Specifies the port to be listening (default: 3636).
        Note: Please note that 'port' is just an abstraction.
        Preloader uses Unix Domain Socket for IPC and the port
        number only serves to compose the socket file name.

  -b,--bind-now
        Performs immediate binding, i.e: uses LD_BIND_NOW.

  -d,--daemonize
        Daemonizes the server (disabled by default).
        (Please note that logs are only saved if a file
        is specified with -o, otherwise, they are discarded).

  -f,--load-libs <file>
        Preloads a set of libraries (one per line) defined in
        a text file. This is especially useful if the program
        dynamically loads *many* libraries.

  -s,--stop
        Stop daemon for a default port, or for a given port if
        -p is specified.

Logging:
  -o,--log-file <file>
        Save log to <file> (default is stderr).

  -l,--log-level <info|err|crit|all>
        Specifies the log level (default: info):
        (Critical messages are always displayed)

        info: Only show information messages, that might be
              useful or not.
        err:  Only show error messages.
        crit: Only show critical messages.
        all:  All of the above.

  -h,--help
        This help
EOF
	exit 1
}

ARGV=()

while [[ $# -gt 0 ]]; do
	case $1 in
		-p|--port)
			check_for_null    "$2"
			check_for_integer "$2"
			export PRELOADER_PORT="$2"
			shift
			shift
			;;
		-b|--bind-now)
			export LD_BIND_NOW="1"
			shift
			;;
		-d|--daemonize)
			export PRELOADER_DAEMONIZE="1"
			shift
			;;
		-f|--load-libs)
			check_for_null "$2"
			export PRELOADER_LOAD_FILE="$2"
			shift
			shift
			;;
		-s|--stop)
			STOP_DAEMON=1
			shift
			;;
		-o|--log-file)
			check_for_null "$2"
			export PRELOADER_LOG_FILE="$2"
			shift
			shift
			;;
		-l|--log-level)
			check_for_null "$2"
			export PRELOADER_LOG_LVL="$2"
			shift
			shift
			;;
		-h|--help)
			usage
			;;
		-*|--*)
			echo "Unknown option: $1" >&2
			usage
			;;
		*)
			ARGV+=("$1")
			shift
			;;
	esac
done

# Check if we should stop
if [ -n "$STOP_DAEMON" ]; then
	stop
fi

# Validate program name
if [ -z "${ARGV[0]}" ]; then
	echo "At least <program-name-or-path> is required!" >&2
	usage
else
	if ! command -v "${ARGV[0]}" &> /dev/null; then
		echo "Program (${ARGV[0]}) not found!" >&2
		usage
	fi
fi

# Run
start "${ARGV[0]}"
